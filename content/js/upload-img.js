$(document).ready(function(){var r="URL HERE",a="uploads/"+Date.now()+"_",e=($("#file_input").withDropZone("#drop_zone",{url:r,uploadBegin:function(e,n,o){console.log("begin: "+e)},uploadEnd:function(e,n,o){console.log("end: "+e)},done:function(e){console.log("done: "+e);for(var n=$("#result_images"),o=[`<b>Your image${1===e.length?"":"s:"}</b>`],t=0;t<e.length;t++){var i=r+a+e[t];o.push(`<a href="${i}">${r+a}<b>${e[t]}</b></a>`)}n.html(o.join("<br/>"))},action:function(e){var n,t="image/png"===this.files[e].type?(n={mimeType:"image/jpeg",maxWidth:150,maxHeight:150},".jpg"):n=null;return{name:"image",rename:function(e,n,o){return e+(t||n)},params:{preview:!0,convertTo:n}}},ifWrongFile:"show",wrapperForInvalidFile:function(e){return`<div style="margin: 20px 0; color: red;">File: "${this.files[e].name}" doesn't support</div>`},multiUploading:!0,formData:function(e,n,o){var t=new FormData;return t.set("key",a+o),t.set("file",n,o),t},ajaxSettings:function(e,n,o,t){e.error=function(e){return alert(`${e.status}: ${e.statusText}`)}}}),$("#file_input-tow").withDropZone("#drop_zone-tow",{url:r,uploadBegin:function(e,n,o){console.log("begin: "+e)},uploadEnd:function(e,n,o){console.log("end: "+e)},done:function(e){console.log("done: "+e);for(var n=$("#result_images"),o=[`<b>Your image${1===e.length?"":"s:"}</b>`],t=0;t<e.length;t++){var i=r+a+e[t];o.push(`<a href="${i}">${r+a}<b>${e[t]}</b></a>`)}n.html(o.join("<br/>"))},action:function(e){var n,t="image/png"===this.files[e].type?(n={mimeType:"image/jpeg",maxWidth:150,maxHeight:150},".jpg"):n=null;return{name:"image",rename:function(e,n,o){return e+(t||n)},params:{preview:!0,convertTo:n}}},ifWrongFile:"show",wrapperForInvalidFile:function(e){return`<div style="margin: 20px 0; color: red;">File: "${this.files[e].name}" doesn't support</div>`},multiUploading:!0,formData:function(e,n,o){var t=new FormData;return t.set("key",a+o),t.set("file",n,o),t},ajaxSettings:function(e,n,o,t){e.error=function(e){return alert(`${e.status}: ${e.statusText}`)}}}),$("#file_input-three").withDropZone("#drop_zone-three",{url:r,uploadBegin:function(e,n,o){console.log("begin: "+e)},uploadEnd:function(e,n,o){console.log("end: "+e)},done:function(e){console.log("done: "+e);for(var n=$("#result_images"),o=[`<b>Your image${1===e.length?"":"s:"}</b>`],t=0;t<e.length;t++){var i=r+a+e[t];o.push(`<a href="${i}">${r+a}<b>${e[t]}</b></a>`)}n.html(o.join("<br/>"))},action:function(e){var n,t="image/png"===this.files[e].type?(n={mimeType:"image/jpeg",maxWidth:150,maxHeight:150},".pdf"):n=null;return{name:"image",rename:function(e,n,o){return e+(t||n)},params:{preview:!0,convertTo:n}}},ifWrongFile:"show",wrapperForInvalidFile:function(e){return`<div style="margin: 20px 0; color: red;">File: "${this.files[e].name}" doesn't support</div>`},multiUploading:!0,formData:function(e,n,o){var t=new FormData;return t.set("key",a+o),t.set("file",n,o),t},ajaxSettings:function(e,n,o,t){e.error=function(e){return alert(`${e.status}: ${e.statusText}`)}}}));$("#upload_images").click(e.upload)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
